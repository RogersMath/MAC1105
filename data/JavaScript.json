[
  {
    "questionId": "JS0000001",
    "question": "What is the output of console.log(typeof NaN)?",
    "answers": [
      "\"number\"",
      "\"NaN\"",
      "\"undefined\"",
      "\"object\""
    ],
    "correct": "\"number\"",
    "explanation": "In JavaScript, NaN (Not-a-Number) is a special value of the Number type, so typeof NaN returns \"number\".",
    "category": "Fundamentals",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000002",
    "question": "Which of the following is NOT a primitive data type in JavaScript?",
    "answers": [
      "Object",
      "BigInt",
      "Symbol",
      "Null"
    ],
    "correct": "Object",
    "explanation": "In JavaScript, the primitive data types are String, Number, Boolean, Null, Undefined, Symbol, and BigInt. Object is not a primitive type; it's a complex data type.",
    "category": "Fundamentals",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000003",
    "question": "What will be the output of the following code?\n\nconst greet = (name) => `Hello, ${name}!`;\nconst sayHi = greet;\nconsole.log(sayHi('Alice'));",
    "answers": [
      "\"Hello, Alice!\"",
      "\"Hello, undefined!\"",
      "Error: sayHi is not a function",
      "undefined"
    ],
    "correct": "\"Hello, Alice!\"",
    "explanation": "The arrow function greet is assigned to sayHi. When sayHi is called with 'Alice', it executes the greet function, returning \"Hello, Alice!\".",
    "category": "Functions and Scope",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000004",
    "question": "What is a closure in JavaScript?",
    "answers": [
      "A function with access to its outer scope",
      "A method to close a database connection",
      "A way to end the execution of a loop",
      "A technique to hide variables from global scope"
    ],
    "correct": "A function with access to its outer scope",
    "explanation": "A closure is a function that has access to variables in its outer (enclosing) lexical scope, even after the outer function has returned.",
    "category": "Functions and Scope",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000005",
    "question": "What is the output of the following code?\n\nconst fruits = ['apple', 'banana', 'cherry'];\nconst [,second] = fruits;\nconsole.log(second);",
    "answers": [
      "\"banana\"",
      "\"apple\"",
      "undefined",
      "['apple', 'banana', 'cherry']"
    ],
    "correct": "\"banana\"",
    "explanation": "This code uses array destructuring. The comma skips the first element, and second is assigned the value of the second element in the array, which is 'banana'.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000006",
    "question": "Which method is used to add one or more elements to the end of an array and returns the new length of the array?",
    "answers": [
      "push()",
      "pop()",
      "unshift()",
      "concat()"
    ],
    "correct": "push()",
    "explanation": "The push() method adds one or more elements to the end of an array and returns the new length of the array.",
    "category": "Objects and Arrays",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000007",
    "question": "What is the primary purpose of the 'use strict' directive in JavaScript?",
    "answers": [
      "To catch common coding errors and prevent the use of certain error-prone features",
      "To allow the use of new ES6+ features",
      "To make the code execute faster",
      "To include external scripts"
    ],
    "correct": "To catch common coding errors and prevent the use of certain error-prone features",
    "explanation": "'use strict' enables strict mode in JavaScript, which helps catch common coding errors and prevents the use of certain error-prone features, making it easier to write 'secure' JavaScript.",
    "category": "Fundamentals",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000008",
    "question": "Which loop iterates over an object's properties?",
    "answers": [
      "for...in",
      "for...of",
      "forEach",
      "while"
    ],
    "correct": "for...in",
    "explanation": "The for...in loop iterates over all enumerable properties of an object, including inherited ones.",
    "category": "Control Flow",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000009",
    "question": "What is the purpose of the Promise object?",
    "answers": [
      "To handle asynchronous operations",
      "To create private variables",
      "To define class methods",
      "To handle exceptions"
    ],
    "correct": "To handle asynchronous operations",
    "explanation": "Promises are used to handle asynchronous operations in JavaScript. They represent a value that may not be available immediately but will be resolved at some point in the future.",
    "category": "Asynchronous JavaScript",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000010",
    "question": "What does the 'typeof' operator return for an array?",
    "answers": [
      "\"object\"",
      "\"array\"",
      "\"function\"",
      "\"undefined\""
    ],
    "correct": "\"object\"",
    "explanation": "In JavaScript, arrays are actually objects, so typeof returns \"object\" for arrays. To check if something is an array, use Array.isArray() method.",
    "category": "Fundamentals",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000011",
    "question": "What is the purpose of the 'bind()' method?",
    "answers": [
      "To set the 'this' value for a function",
      "To concatenate two arrays",
      "To bind event listeners",
      "To create a new function"
    ],
    "correct": "To set the 'this' value for a function",
    "explanation": "The bind() method creates a new function that, when called, has its 'this' keyword set to the provided value.",
    "category": "Functions and Scope",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000012",
    "question": "What is the output of console.log(1 + '2' + '2')?",
    "answers": [
      "\"122\"",
      "\"14\"",
      "5",
      "\"32\""
    ],
    "correct": "\"122\"",
    "explanation": "In this expression, type coercion occurs. The + operator, when used with a string, prioritizes string concatenation. So, 1 is first converted to a string, then concatenated with '2', resulting in '12'. This is then concatenated with the final '2', giving '122'.",
    "category": "Fundamentals",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000013",
    "question": "Which method is used to select the first matching element?",
    "answers": [
      "querySelector()",
      "getElementById()",
      "getElementsByClassName()",
      "getElementsByTagName()"
    ],
    "correct": "querySelector()",
    "explanation": "querySelector() returns the first Element within the document that matches the specified selector, or group of selectors.",
    "category": "DOM Manipulation",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000014",
    "question": "What is event bubbling in JavaScript?",
    "answers": [
      "Event propagation from child to parent elements",
      "Creating multiple events simultaneously",
      "Preventing default event behavior",
      "Attaching multiple handlers to one event"
    ],
    "correct": "Event propagation from child to parent elements",
    "explanation": "Event bubbling is a type of event propagation where the event first triggers on the innermost target element, and then propagates to outer elements.",
    "category": "DOM Manipulation",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000015",
    "question": "What is the purpose of the 'debugger' statement?",
    "answers": [
      "To pause execution and call debugging function",
      "To log all variables to the console",
      "To remove all bugs from the code automatically",
      "To terminate the program execution"
    ],
    "correct": "To pause execution and call debugging function",
    "explanation": "The debugger statement invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.",
    "category": "Error Handling and Debugging",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000016",
    "question": "What does the 'let' keyword do in JavaScript?",
    "answers": [
      "Declares a block-scoped variable",
      "Defines a constant",
      "Creates a global variable",
      "Declares a function-scoped variable"
    ],
    "correct": "Declares a block-scoped variable",
    "explanation": "The 'let' keyword declares a block-scoped local variable, optionally initializing it to a value.",
    "category": "Fundamentals",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000017",
    "question": "What is the purpose of the 'async' keyword in JavaScript?",
    "answers": [
      "To define asynchronous functions",
      "To create synchronous operations",
      "To declare global variables",
      "To handle exceptions in try-catch blocks"
    ],
    "correct": "To define asynchronous functions",
    "explanation": "The 'async' keyword is used to define asynchronous functions. These functions automatically return a Promise and allow the use of the 'await' keyword within them.",
    "category": "Asynchronous JavaScript",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000018",
    "question": "What does the 'map()' method do in JavaScript?",
    "answers": [
      "Creates a new array with results of a function",
      "Modifies the original array in place",
      "Filters out elements from an array",
      "Reduces an array to a single value"
    ],
    "correct": "Creates a new array with results of a function",
    "explanation": "The map() method creates a new array with the results of calling a provided function on every element in the calling array.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000019",
    "question": "What is the purpose of the 'prototype' property in JavaScript?",
    "answers": [
      "To add properties and methods to objects",
      "To create private variables in classes",
      "To define static methods in classes",
      "To implement multiple inheritance"
    ],
    "correct": "To add properties and methods to objects",
    "explanation": "The prototype property allows you to add properties and methods to object constructors, which will be shared by all instances of that object.",
    "category": "Objects and Arrays",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000020",
    "question": "What is the result of '5' + 3 in JavaScript?",
    "answers": [
      "\"53\"",
      "8",
      "\"8\"",
      "53"
    ],
    "correct": "\"53\"",
    "explanation": "When the + operator is used with a string and a number, the number is converted to a string and concatenation occurs.",
    "category": "Fundamentals",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000021",
    "question": "What is a callback function in JavaScript?",
    "answers": [
      "A function passed as an argument to another function",
      "A function that calls itself recursively",
      "A function that returns another function",
      "A function that handles errors in try-catch blocks"
    ],
    "correct": "A function passed as an argument to another function",
    "explanation": "A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.",
    "category": "Functions and Scope",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000022",
    "question": "What does the 'Object.create()' method do?",
    "answers": [
      "Creates a new object with the specified prototype object",
      "Creates a shallow copy of an existing object",
      "Creates a new empty object",
      "Creates a deep copy of an existing object"
    ],
    "correct": "Creates a new object with the specified prototype object",
    "explanation": "Object.create() method creates a new object, using an existing object as the prototype of the newly created object.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000023",
    "question": "What is the purpose of the 'yield' keyword in JavaScript?",
    "answers": [
      "To pause and resume a generator function",
      "To return a value from a regular function",
      "To create a new promise",
      "To handle exceptions in async functions"
    ],
    "correct": "To pause and resume a generator function",
    "explanation": "The 'yield' keyword is used in generator functions to pause function execution and return a value to the caller, while maintaining the function's state.",
    "category": "Functions and Scope",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000024",
    "question": "What is the difference between 'null' and 'undefined' in JavaScript?",
    "answers": [
      "'null' is an assigned value, 'undefined' is not assigned",
      "'null' is for objects, 'undefined' is for primitives",
      "'null' is falsy, 'undefined' is truthy",
      "'null' is a number, 'undefined' is a string"
    ],
    "correct": "'null' is an assigned value, 'undefined' is not assigned",
    "explanation": "'null' is an assigned value representing no value or no object. 'undefined' typically means a variable has been declared but not defined yet.",
    "category": "Fundamentals",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000025",
    "question": "What is the purpose of the 'try...catch' statement in JavaScript?",
    "answers": [
      "To handle and recover from runtime errors",
      "To define a block of code to be tested for errors",
      "To create custom error types",
      "To throw exceptions manually"
    ],
    "correct": "To handle and recover from runtime errors",
    "explanation": "The try...catch statement is used to handle runtime errors (exceptions). The try block contains the code that might throw an error, and the catch block handles the error if it occurs.",
    "category": "Error Handling and Debugging",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000026",
    "question": "What does the 'new' keyword do in JavaScript?",
    "answers": [
      "Creates an instance of an object type",
      "Declares a new variable",
      "Starts a new block of code",
      "Creates a new function"
    ],
    "correct": "Creates an instance of an object type",
    "explanation": "The 'new' keyword is used to create an instance of an object type or of a constructor function.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000027",
    "question": "What is the purpose of the 'fetch()' function in JavaScript?",
    "answers": [
      "To make network requests",
      "To retrieve data from local storage",
      "To fetch elements from the DOM",
      "To import modules dynamically"
    ],
    "correct": "To make network requests",
    "explanation": "The fetch() function is used to make network requests, typically to retrieve resources from a server. It returns a Promise that resolves to the Response to that request.",
    "category": "Asynchronous JavaScript",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000028",
    "question": "What is the purpose of the 'spread' operator (...) in JavaScript?",
    "answers": [
      "To expand an iterable into individual elements",
      "To concatenate multiple arrays",
      "To create a shallow copy of an object",
      "To merge objects"
    ],
    "correct": "To expand an iterable into individual elements",
    "explanation": "The spread operator (...) allows an iterable such as an array or string to be expanded in places where zero or more arguments or elements are expected.",
    "category": "ES6+ Features",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000029",
    "question": "What is the purpose of the 'Object.freeze()' method?",
    "answers": [
      "To make an object immutable",
      "To prevent new properties from being added",
      "To seal an object",
      "To create a shallow copy of an object"
    ],
    "correct": "To make an object immutable",
    "explanation": "Object.freeze() freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed.",
    "category": "Objects and Arrays",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000030",
    "question": "What does the 'instanceof' operator do in JavaScript?",
    "answers": [
      "Tests if an object has a prototype in its chain",
      "Checks if a variable is defined",
      "Compares two objects for equality",
      "Creates a new instance of a class"
    ],
    "correct": "Tests if an object has a prototype in its chain",
    "explanation": "The instanceof operator tests whether the prototype property of a constructor appears anywhere in the prototype chain of an object.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000031",
    "question": "What is the purpose of the 'super' keyword in JavaScript classes?",
    "answers": [
      "To call methods on an object's parent",
      "To define a superclass",
      "To create a new instance of a class",
      "To access static properties of a class"
    ],
    "correct": "To call methods on an object's parent",
    "explanation": "The 'super' keyword is used to call corresponding methods of super class. This is one way that JavaScript demonstrates prototype-based inheritance.",
    "category": "ES6+ Features",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000032",
    "question": "What is a WeakMap in JavaScript?",
    "answers": [
      "A collection of key/value pairs with object keys",
      "A Map with a smaller memory footprint",
      "A Map that automatically removes entries",
      "A Map that only allows primitive values"
    ],
    "correct": "A collection of key/value pairs with object keys",
    "explanation": "A WeakMap is a collection of key/value pairs in which the keys must be objects and the values can be arbitrary values. The 'weak' part means that the keys are weakly referenced, allowing them to be garbage collected when there are no other references to the object.",
    "category": "ES6+ Features",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000033",
    "question": "What is the purpose of the 'reduce()' method in JavaScript?",
    "answers": [
      "To reduce an array to a single value",
      "To remove elements from an array",
      "To iterate over an array",
      "To sort an array in ascending order"
    ],
    "correct": "To reduce an array to a single value",
    "explanation": "The reduce() method executes a reducer function on each element of the array, resulting in a single output value.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000034",
    "question": "Which of the following is NOT a recommended way to declare variables in modern JavaScript?",
    "answers": [
      "var x = 5;",
      "let x = 5;",
      "const x = 5;",
      "x = 5;"
    ],
    "correct": "var x = 5;",
    "explanation": "In modern JavaScript, 'let' and 'const' are preferred over 'var' due to their block scoping. 'var' is not recommended in most cases due to its function scoping and potential for unintended consequences.",
    "category": "Fundamentals",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000035",
    "question": "What is a pure function in JavaScript?",
    "answers": [
      "A function with no side effects",
      "A function that only uses local variables",
      "A function that always returns a boolean",
      "A function defined inside another function"
    ],
    "correct": "A function with no side effects",
    "explanation": "A pure function is a function that, given the same input, will always return the same output and does not have any observable side effect.",
    "category": "Functions and Scope",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000036",
    "question": "What is the purpose of the 'Object.assign()' method?",
    "answers": [
      "To copy properties from source objects to a target object",
      "To create a new object from scratch",
      "To compare two objects for equality",
      "To freeze an object, making it immutable"
    ],
    "correct": "To copy properties from source objects to a target object",
    "explanation": "Object.assign() is used to copy the values of all enumerable own properties from one or more source objects to a target object. It returns the modified target object.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000037",
    "question": "What is the difference between '=='' and '==='' in JavaScript?",
    "answers": [
      "'===' checks value and type, '==' only checks value",
      "'==' checks value and type, '===' only checks value",
      "'===' is for numbers, '==' is for strings",
      "There is no difference, they are interchangeable"
    ],
    "correct": "'===' checks value and type, '==' only checks value",
    "explanation": "The '===' operator checks for strict equality, comparing both value and type without type coercion. The '==' operator checks for loose equality and performs type coercion if necessary.",
    "category": "Fundamentals",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000038",
    "question": "What is the purpose of the 'Symbol' data type in JavaScript?",
    "answers": [
      "To create unique identifiers",
      "To represent mathematical symbols",
      "To define special operators",
      "To create immutable strings"
    ],
    "correct": "To create unique identifiers",
    "explanation": "Symbols are a new primitive type introduced in ES6. They are unique identifiers, useful for adding unique property keys to an object that won't collide with keys any other code might add to the object.",
    "category": "ES6+ Features",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000039",
    "question": "What does the 'await' keyword do in JavaScript?",
    "answers": [
      "Pauses execution of async functions",
      "Creates a new Promise",
      "Handles errors in try-catch blocks",
      "Defines a new asynchronous function"
    ],
    "correct": "Pauses execution of async functions",
    "explanation": "The await operator is used to wait for a Promise. It can only be used inside an async function.",
    "category": "Asynchronous JavaScript",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000040",
    "question": "What is the purpose of the 'filter()' method in JavaScript?",
    "answers": [
      "Creates a new array with elements that pass a test",
      "Removes the first element of an array",
      "Adds new elements to the beginning of an array",
      "Reverses the order of elements in an array"
    ],
    "correct": "Creates a new array with elements that pass a test",
    "explanation": "The filter() method creates a new array with all elements that pass the test implemented by the provided function.",
    "category": "Objects and Arrays",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000041",
    "question": "What is a closure in JavaScript?",
    "answers": [
      "A function with access to its outer scope",
      "A method to close a database connection",
      "A way to encapsulate private variables",
      "A technique to optimize function calls"
    ],
    "correct": "A function with access to its outer scope",
    "explanation": "A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).",
    "category": "Functions and Scope",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000042",
    "question": "What is the purpose of the 'class' keyword in JavaScript?",
    "answers": [
      "To define a new class",
      "To create a new object",
      "To declare a variable",
      "To import a module"
    ],
    "correct": "To define a new class",
    "explanation": "The class keyword is used to declare a new class in JavaScript. It's a more convenient syntax for creating objects and dealing with inheritance.",
    "category": "ES6+ Features",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000043",
    "question": "What does the 'JSON.parse()' method do?",
    "answers": [
      "Converts a JSON string to a JavaScript object",
      "Converts a JavaScript object to a JSON string",
      "Parses a JavaScript expression",
      "Creates a new JSON object"
    ],
    "correct": "Converts a JSON string to a JavaScript object",
    "explanation": "JSON.parse() parses a JSON string, constructing the JavaScript value or object described by the string.",
    "category": "Fundamentals",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000044",
    "question": "What is the purpose of the 'Array.from()' method?",
    "answers": [
      "Creates a new Array from an array-like object",
      "Converts an array to a string",
      "Removes elements from the end of an array",
      "Adds elements to the beginning of an array"
    ],
    "correct": "Creates a new Array from an array-like object",
    "explanation": "Array.from() creates a new, shallow-copied Array instance from an array-like or iterable object.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000045",
    "question": "What is the 'event loop' in JavaScript?",
    "answers": [
      "A mechanism to handle asynchronous callbacks",
      "A type of control structure",
      "A method to create circular references",
      "A way to define recursive functions"
    ],
    "correct": "A mechanism to handle asynchronous callbacks",
    "explanation": "The event loop is a programming construct that waits for and dispatches events or messages in a program. It's how JavaScript handles asynchronous callbacks.",
    "category": "Asynchronous JavaScript",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000046",
    "question": "What is the purpose of the 'setTimeout()' function?",
    "answers": [
      "To delay execution of a function",
      "To measure execution time of a function",
      "To set a maximum execution time for a script",
      "To pause the execution of an async function"
    ],
    "correct": "To delay execution of a function",
    "explanation": "The setTimeout() function is used to delay the execution of a function or a piece of code for a specified amount of time.",
    "category": "Asynchronous JavaScript",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000047",
    "question": "What does the 'use strict' directive do in JavaScript?",
    "answers": [
      "Enforces stricter parsing and error handling",
      "Allows the use of future reserved keywords",
      "Enables new ES6+ features",
      "Improves performance of the script"
    ],
    "correct": "Enforces stricter parsing and error handling",
    "explanation": "'use strict' is a literal expression that enables strict mode in JavaScript. This strict context prevents certain actions from being taken and throws more exceptions.",
    "category": "Fundamentals",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000048",
    "question": "What is a modern alternative to using the 'arguments' object in JavaScript functions?",
    "answers": [
      "Rest parameters (...args)",
      "The Array.from() method",
      "The apply() method",
      "The bind() method"
    ],
    "correct": "Rest parameters (...args)",
    "explanation": "Rest parameters (indicated by ...args) provide a cleaner and more flexible way to handle an indefinite number of arguments in a function, compared to the older 'arguments' object.",
    "category": "Functions and Scope",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000049",
    "question": "What is the purpose of the 'Object.keys()' method in JavaScript?",
    "answers": [
      "Returns an array of a given object's own enumerable property names",
      "Creates a new object with the specified prototype object and properties",
      "Returns an array of a given object's own enumerable string-keyed property values",
      "Determines whether an object contains the specified property as a direct property"
    ],
    "correct": "Returns an array of a given object's own enumerable property names",
    "explanation": "Object.keys() method returns an array of a given object's own enumerable property names, in the same order as we get with a normal loop.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000050",
    "question": "What does the 'every()' method do in JavaScript?",
    "answers": [
      "Tests if all elements pass a test",
      "Executes a function once for each array element",
      "Creates a new array with every element being the result of a callback function",
      "Checks if at least one element in the array passes the test implemented by the provided function"
    ],
    "correct": "Tests if all elements pass a test",
    "explanation": "The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000051",
    "question": "What is the purpose of the 'Promise.all()' method?",
    "answers": [
      "Resolves when all promises resolve",
      "Creates a Promise that is resolved with an array of results when all of the provided Promises resolve, or rejected when any Promise is rejected",
      "Returns a promise that resolves after all of the given promises have either fulfilled or rejected, with an array of objects that each describes the outcome of each promise",
      "Returns a promise that fulfills or rejects as soon as one of the promises in an iterable fulfills or rejects, with the value or reason from that promise"
    ],
    "correct": "Resolves when all promises resolve",
    "explanation": "Promise.all() method takes an iterable of promises as an input, and returns a single Promise that resolves to an array of the results of the input promises when all of them resolve.",
    "category": "Asynchronous JavaScript",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000052",
    "question": "What is the purpose of the 'Set' object in JavaScript?",
    "answers": [
      "Stores unique values",
      "Creates a collection of key-value pairs where both the keys and values may be objects or primitive values",
      "Allows you to store key-value pairs where the keys are allowed to be objects",
      "Creates an array of key-value pairs where duplicate keys are allowed"
    ],
    "correct": "Stores unique values",
    "explanation": "The Set object lets you store unique values of any type, whether primitive values or object references. Each value can only occur once in a Set.",
    "category": "ES6+ Features",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000053",
    "question": "What does the 'some()' method do in JavaScript?",
    "answers": [
      "Tests if any element passes",
      "Executes a reducer function on each element of the array, resulting in a single output value",
      "Creates a new array with all elements that pass the test implemented by the provided function",
      "Executes a provided function once for each array element in ascending order"
    ],
    "correct": "Tests if any element passes",
    "explanation": "The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000054",
    "question": "What is the purpose of the 'Object.freeze()' method?",
    "answers": [
      "Prevents new properties from being added and marks existing ones as non-configurable",
      "Seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable",
      "Makes an object immune to changes, preventing new properties from being added and existing properties from being removed or modified",
      "Prevents the modification of existing property attributes and values, and prevents the addition of new properties"
    ],
    "correct": "Prevents new properties from being added and marks existing ones as non-configurable",
    "explanation": "Object.freeze() freezes an object. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed.",
    "category": "Objects and Arrays",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000055",
    "question": "What is the purpose of the 'async' keyword in JavaScript?",
    "answers": [
      "Defines an asynchronous function",
      "Creates a new Promise object",
      "Pauses the execution of an asynchronous function and waits for a Promise's resolution",
      "Schedules a task to be performed asynchronously, similar to setTimeout but with better performance"
    ],
    "correct": "Defines an asynchronous function",
    "explanation": "The async keyword is used to declare an asynchronous function. Async functions are instances of the AsyncFunction constructor, and the await keyword is permitted within them.",
    "category": "Asynchronous JavaScript",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000056",
    "question": "What does the 'bind()' method do in JavaScript?",
    "answers": [
      "Creates a new function with a fixed 'this'",
      "Calls a function with a given this value and arguments provided individually",
      "Calls a function with a given this value and arguments provided as an array",
      "Invokes a function immediately, replacing the original function definition"
    ],
    "correct": "Creates a new function with a fixed 'this'",
    "explanation": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
    "category": "Functions and Scope",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000057",
    "question": "What is the purpose of the 'template literals' in JavaScript?",
    "answers": [
      "Allow embedded expressions",
      "Create immutable string objects",
      "Convert strings to uppercase",
      "Encrypt string content for secure transmission"
    ],
    "correct": "Allow embedded expressions",
    "explanation": "Template literals are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them.",
    "category": "ES6+ Features",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000058",
    "question": "What does the 'Object.assign()' method do?",
    "answers": [
      "Copies properties to a target object",
      "Creates a new object with the specified prototype object and properties",
      "Adds the provided properties to every object in the application",
      "Removes all properties from an object, leaving it empty"
    ],
    "correct": "Copies properties to a target object",
    "explanation": "The Object.assign() method copies all enumerable own properties from one or more source objects to a target object. It returns the modified target object.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000059",
    "question": "What is the purpose of the 'for...of' statement in JavaScript?",
    "answers": [
      "Iterates over iterable objects",
      "Executes a specified number of times",
      "Loops through the properties of an object",
      "Iterates over the index of array elements"
    ],
    "correct": "Iterates over iterable objects",
    "explanation": "The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects, TypedArray, Map, Set, and user-defined iterables.",
    "category": "Control Flow",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000060",
    "question": "What does the 'startsWith()' method do in JavaScript?",
    "answers": [
      "Checks if a string begins with specified characters",
      "Removes whitespace from the beginning of a string",
      "Converts the first character of a string to uppercase",
      "Splits a string into an array of substrings"
    ],
    "correct": "Checks if a string begins with specified characters",
    "explanation": "The startsWith() method determines whether a string begins with the characters of a specified string, returning true or false as appropriate.",
    "category": "Fundamentals",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000061",
    "question": "What is the purpose of the 'Map' object in JavaScript?",
    "answers": [
      "Holds key-value pairs",
      "Creates a collection of unique values",
      "Stores data in a tabular format",
      "Generates a visual representation of data"
    ],
    "correct": "Holds key-value pairs",
    "explanation": "The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value.",
    "category": "ES6+ Features",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000062",
    "question": "What does the 'Object.entries()' method do?",
    "answers": [
      "Returns an array of a given object's own enumerable string-keyed property [key, value] pairs",
      "Creates a new object with all properties of the original object set to enumerable",
      "Returns an array of all property names in an object, including non-enumerable properties",
      "Converts an object into a Map, with each property becoming a key-value pair"
    ],
    "correct": "Returns an array of a given object's own enumerable string-keyed property [key, value] pairs",
    "explanation": "The Object.entries() method returns an array of a given object's own enumerable string-keyed property [key, value] pairs.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000063",
    "question": "What is the purpose of the 'findIndex()' method in JavaScript?",
    "answers": [
      "Returns index of the first element that satisfies a condition",
      "Locates the position of a specified value within an array",
      "Finds the index of the last occurrence of a specified element in an array",
      "Returns the value of the first element in the array that satisfies the provided testing function"
    ],
    "correct": "Returns index of the first element that satisfies a condition",
    "explanation": "The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.",
    "category": "Objects and Arrays",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000064",
    "question": "What does the 'Array.isArray()' method do?",
    "answers": [
      "Determines if the passed value is an Array",
      "Checks if all elements in an array are of the same type",
      "Verifies if the array contains only numeric values",
      "Tests whether an array includes a certain value among its entries"
    ],
    "correct": "Determines if the passed value is an Array",
    "explanation": "The Array.isArray() method determines whether the passed value is an Array. It returns true if the value is an Array, and false otherwise.",
    "category": "Objects and Arrays",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000065",
    "question": "Which practice is recommended for declaring variables in JavaScript?",
    "answers": [
      "Use 'const' for values that won't be reassigned, 'let' for those that will",
      "Always use 'var' for maximum browser compatibility",
      "Use 'let' for all variable declarations to ensure block scoping",
      "Declare all variables at the top of the function using 'var'"
    ],
    "correct": "Use 'const' for values that won't be reassigned, 'let' for those that will",
    "explanation": "Using 'const' for variables that won't be reassigned and 'let' for those that will helps prevent accidental reassignments and makes the code's intent clearer.",
    "category": "Best Practices",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000066",
    "question": "What is a best practice for handling asynchronous operations in modern JavaScript?",
    "answers": [
      "Use async/await",
      "Use nested callbacks",
      "Use synchronous operations instead",
      "Always use setTimeout for asynchronous code"
    ],
    "correct": "Use async/await",
    "explanation": "async/await provides a more readable and maintainable way to write asynchronous code compared to callbacks or raw promises.",
    "category": "Best Practices",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000067",
    "question": "Which practice helps prevent pollution of the global namespace?",
    "answers": [
      "Use modules or IIFE",
      "Declare all variables as global",
      "Use 'var' instead of 'let' or 'const'",
      "Avoid using functions"
    ],
    "correct": "Use modules or IIFE",
    "explanation": "Using modules (in modern JavaScript) or Immediately Invoked Function Expressions (IIFE) helps encapsulate code and prevent unnecessary pollution of the global namespace.",
    "category": "Best Practices",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000068",
    "question": "What is a recommended practice for improving code readability?",
    "answers": [
      "Use meaningful variable and function names",
      "Minimize the use of comments",
      "Use single-letter variable names for efficiency",
      "Combine multiple operations in a single line"
    ],
    "correct": "Use meaningful variable and function names",
    "explanation": "Using descriptive and meaningful names for variables and functions makes the code self-documenting and easier to understand.",
    "category": "Best Practices",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000069",
    "question": "Which practice is recommended for error handling in JavaScript?",
    "answers": [
      "Use try-catch blocks for error-prone code",
      "Ignore errors to improve performance",
      "Use alert() to display all errors",
      "Always return null when an error occurs"
    ],
    "correct": "Use try-catch blocks for error-prone code",
    "explanation": "Using try-catch blocks allows you to handle errors gracefully, preventing them from crashing your application and providing opportunities for recovery or logging.",
    "category": "Best Practices",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000070",
    "question": "What is a best practice for working with arrays in JavaScript?",
    "answers": [
      "Use array methods like map, filter, and reduce",
      "Always use for loops to iterate over arrays",
      "Convert arrays to objects before processing",
      "Avoid using arrays for large datasets"
    ],
    "correct": "Use array methods like map, filter, and reduce",
    "explanation": "Array methods like map, filter, and reduce provide a more declarative and often more readable way to work with arrays compared to traditional loops.",
    "category": "Best Practices",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000071",
    "question": "Which practice helps prevent potential issues with floating-point arithmetic in JavaScript?",
    "answers": [
      "Use libraries for precise calculations",
      "Always use integers instead of floats",
      "Round all results to the nearest whole number",
      "Use the eval() function for calculations"
    ],
    "correct": "Use libraries for precise calculations",
    "explanation": "Due to how floating-point numbers are represented in binary, precise calculations can sometimes yield unexpected results. Using libraries designed for precise arithmetic can help avoid these issues.",
    "category": "Best Practices",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000072",
    "question": "What is a recommended practice for optimizing JavaScript performance?",
    "answers": [
      "Minimize DOM manipulation",
      "Use eval() for dynamic code execution",
      "Declare all variables as global",
      "Nest loops as deeply as possible"
    ],
    "correct": "Minimize DOM manipulation",
    "explanation": "DOM manipulation is often one of the slowest operations in JavaScript. Minimizing it, batching changes, and using techniques like document fragments can significantly improve performance.",
    "category": "Best Practices",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000073",
    "question": "Which practice is recommended for writing more maintainable JavaScript code?",
    "answers": [
      "Follow a consistent coding style",
      "Avoid using comments in the code",
      "Write the entire application in a single file",
      "Use shortest possible variable names"
    ],
    "correct": "Follow a consistent coding style",
    "explanation": "Following a consistent coding style, whether personal or a recognized standard like Airbnb's, makes the code more readable and easier to maintain, especially in team environments.",
    "category": "Best Practices",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000074",
    "question": "What is a best practice for handling configuration in JavaScript applications?",
    "answers": [
      "Use environment variables or config files",
      "Hardcode configuration values in the source code",
      "Store all configuration in global variables",
      "Use localStorage for all configuration settings"
    ],
    "correct": "Use environment variables or config files",
    "explanation": "Using environment variables or separate configuration files allows for easier management of different environments (development, staging, production) and keeps sensitive information out of the source code.",
    "category": "Best Practices",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000075",
    "question": "Which practice is recommended for writing more secure JavaScript code?",
    "answers": [
      "Validate and sanitize user input",
      "Store sensitive data in localStorage",
      "Use eval() for parsing JSON data",
      "Disable Content Security Policy"
    ],
    "correct": "Validate and sanitize user input",
    "explanation": "Validating and sanitizing user input helps prevent various security vulnerabilities, including cross-site scripting (XSS) attacks.",
    "category": "Best Practices",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000076",
    "question": "What is a recommended practice for debugging JavaScript code?",
    "answers": [
      "Use browser developer tools",
      "Add alert() statements throughout the code",
      "Remove all error handling to see where code breaks",
      "Always run code in production for real-world testing"
    ],
    "correct": "Use browser developer tools",
    "explanation": "Browser developer tools provide powerful debugging capabilities, including breakpoints, step-through execution, and console logging, making them invaluable for identifying and fixing issues.",
    "category": "Best Practices",
    "difficulty": "Easy"
  },
  {
    "questionId": "JS0000077",
    "question": "Which practice is recommended for organizing JavaScript code in larger applications?",
    "answers": [
      "Use a modular architecture",
      "Keep all code in a single file for easier searching",
      "Avoid using third-party libraries",
      "Use global variables for sharing data between components"
    ],
    "correct": "Use a modular architecture",
    "explanation": "A modular architecture, whether through ES6 modules or a module bundler like webpack, helps in organizing code, managing dependencies, and improving maintainability in larger applications.",
    "category": "Best Practices",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000078",
    "question": "What is a best practice for handling browser compatibility issues in JavaScript?",
    "answers": [
      "Use feature detection",
      "Check the user agent string",
      "Support only the latest browser versions",
      "Use alert() to notify users of incompatibility"
    ],
    "correct": "Use feature detection",
    "explanation": "Feature detection involves checking if a browser supports a particular feature before using it, allowing for more robust and future-proof code compared to browser sniffing.",
    "category": "Best Practices",
    "difficulty": "Medium"
  },
  {
    "questionId": "JS0000079",
    "question": "Which practice is recommended for writing testable JavaScript code?",
    "answers": [
      "Write pure functions where possible",
      "Avoid writing unit tests to save time",
      "Combine all functionality into large functions",
      "Use global variables for all shared state"
    ],
    "correct": "Write pure functions where possible",
    "explanation": "Pure functions, which always produce the same output for the same input and have no side effects, are easier to test and reason about, leading to more maintainable code.",
    "category": "Best Practices",
    "difficulty": "Hard"
  },
  {
    "questionId": "JS0000080",
    "question": "What is a recommended practice for handling API requests in JavaScript?",
    "answers": [
      "Use fetch or axios instead of XMLHttpRequest",
      "Always use synchronous requests",
      "Avoid error handling to simplify code",
      "Store API keys in the client-side code"
    ],
    "correct": "Use fetch or axios instead of XMLHttpRequest",
    "explanation": "Modern APIs like fetch, or libraries like axios, provide a more powerful and easier-to-use interface for making HTTP requests compared to the older XMLHttpRequest.",
    "category": "Best Practices",
    "difficulty": "Medium"
  }
]
